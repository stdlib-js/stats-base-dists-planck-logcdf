{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a Planck distribution with shape parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 0.5 );\n* // returns ~-0.2525\n*\n* @example\n* var y = logcdf( 2.0, 1.5 );\n* // returns ~-0.0112\n*\n* @example\n* var y = logcdf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Invalid shape parameter\n* var y = logcdf( 2.0, -1.4 );\n* // returns NaN\n*/\nfunction logcdf( x, lambda ) {\n\tif ( isnan( x ) || isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\treturn ln( -expm1( -lambda * ( floor( x ) + 1.0 ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = logcdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Planck distribution with shape parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 1.5 );\n* var y = logcdf( 3.0 );\n* // returns ~-0.0025\n*\n* y = logcdf( 1.0 );\n* // returns ~-0.0511\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a Planck distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ln( -expm1( -lambda * ( floor(x)+1.0 ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the logarithm of the cumulative distribution function (CDF) for a Planck distribution with shape parameter `lambda`.\n*\n* @module @stdlib/stats-base-dists-planck-logcdf\n*\n* @example\n* var logcdf = require( '@stdlib/stats-base-dists-planck-logcdf' );\n*\n* var y = logcdf( 2.0, 0.5 );\n* // returns ~-0.2525\n*\n* y = logcdf( 2.0, 1.5 );\n* // returns ~-0.0112\n*\n* var mylogcdf = logcdf.factory( 1.5 );\n* y = mylogcdf( 3.0 );\n* // returns ~-0.0025\n*\n* y = mylogcdf( 1.0 );\n* // returns ~-0.0511\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAK,QAAS,8BAA+B,EAC7CC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EAqCrD,SAASC,EAAQC,EAAGC,EAAS,CAC5B,OAAKR,EAAOO,CAAE,GAAKP,EAAOQ,CAAO,GAAKA,GAAU,EACxC,IAEHD,EAAI,EACDH,EAEHG,IAAMF,EACH,EAEDF,EAAI,CAACD,EAAO,CAACM,GAAWP,EAAOM,CAAE,EAAI,EAAM,CAAE,CACrD,CAKAR,EAAO,QAAUO,IChFjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAK,QAAS,8BAA+B,EAC7CC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EAmBrD,SAASC,EAASC,EAAS,CAC1B,GAAKP,EAAOO,CAAO,GAAKA,GAAU,EACjC,OAAOR,EAAkB,GAAI,EAE9B,OAAOS,EAaP,SAASA,EAAQC,EAAI,CACpB,OAAKT,EAAOS,CAAE,EACN,IAEHA,EAAI,EACDL,EAEHK,IAAMJ,EACH,EAEDF,EAAI,CAACD,EAAO,CAACK,GAAWN,EAAMQ,CAAC,EAAE,EAAM,CAAE,CACjD,CACD,CAKAX,EAAO,QAAUQ,ICrCjB,IAAII,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "floor", "expm1", "ln", "NINF", "PINF", "logcdf", "x", "lambda", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "isnan", "floor", "expm1", "ln", "NINF", "PINF", "factory", "lambda", "logcdf", "x", "setReadOnly", "main", "factory"]
}
