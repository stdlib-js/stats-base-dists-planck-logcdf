{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the cumulative distribution function (CDF) for a Planck distribution with shape parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 2.0, 0.5 );\n* // returns ~-0.2525\n*\n* @example\n* var y = logcdf( 2.0, 1.5 );\n* // returns ~-0.0112\n*\n* @example\n* var y = logcdf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Invalid shape parameter\n* var y = logcdf( 2.0, -1.4 );\n* // returns NaN\n*/\nfunction logcdf( x, lambda ) {\n\tif ( isnan( x ) || isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\treturn ln( -expm1( -lambda * ( floor(x)+1.0 ) ) );\n}\n\n\n// EXPORTS //\n\nexport default logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport floor from '@stdlib/math-base-special-floor';\nimport expm1 from '@stdlib/math-base-special-expm1';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Planck distribution with shape parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} logCDF\n*\n* @example\n* var logcdf = factory( 1.5 );\n* var y = logcdf( 3.0 );\n* // returns ~-0.0025\n*\n* y = logcdf( 1.0 );\n* // returns ~-0.0511\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the logarithm of the cumulative distribution function (CDF) for a Planck distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ln( -expm1( -lambda * ( floor(x)+1.0 ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the logarithm of the cumulative distribution function (CDF) for a Planck distribution with shape parameter `lambda`.\n*\n* @module @stdlib/stats-base-dists-planck-logcdf\n*\n* @example\n* import logcdf from '@stdlib/stats-base-dists-planck-logcdf';\n*\n* var y = logcdf( 2.0, 0.5 );\n* // returns ~-0.2525\n*\n* y = logcdf( 2.0, 1.5 );\n* // returns ~-0.0112\n*\n* var mylogcdf = logcdf.factory( 1.5 );\n* y = mylogcdf( 3.0 );\n* // returns ~-0.0025\n*\n* y = mylogcdf( 1.0 );\n* // returns ~-0.0511\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["logcdf","x","lambda","isnan","NaN","NINF","PINF","ln","expm1","floor","factory","constantFunction","setReadOnly","main"],"mappings":";;iyBAgEA,SAASA,EAAQC,EAAGC,GACnB,OAAKC,EAAOF,IAAOE,EAAOD,IAAYA,GAAU,EACxCE,IAEHH,EAAI,EACDI,EAEHJ,IAAMK,EACH,EAEDC,GAAKC,GAAQN,GAAWO,EAAMR,GAAG,IACzC,CC5BA,SAASS,EAASR,GACjB,OAAKC,EAAOD,IAAYA,GAAU,EAC1BS,EAAkBP,KAe1B,SAAiBH,GAChB,GAAKE,EAAOF,GACX,OAAOG,IAER,GAAKH,EAAI,EACR,OAAOI,EAER,GAAKJ,IAAMK,EACV,OAAO,EAER,OAAOC,GAAKC,GAAQN,GAAWO,EAAMR,GAAG,IACxC,CACF,CCzBAW,EAAAC,EAAA,UAAAH"}